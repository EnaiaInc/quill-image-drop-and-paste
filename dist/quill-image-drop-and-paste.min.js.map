{"version":3,"file":"quill-image-drop-and-paste.min.js","sources":["../src/utils.ts","../src/ImageData.ts","../src/ImageDropAndPaste.ts"],"sourcesContent":["export default {\n  /* generate a filename\n   */\n  generateFilename(): string {\n    return btoa(String(Math.random() * 1e6) + String(+new Date())).replace('=', '');\n  },\n  /* detect the giving url is a image\n   */\n  urlIsImage(url: string, abortTimeout = 3000): Promise<boolean> {\n    if (!this.validURL(url)) {\n      return Promise.reject(false);\n    }\n    if (/\\.(jpeg|jpg|gif|png|webp|tiff|bmp)$/.test(url)) {\n      return Promise.resolve(true);\n    }\n    return new Promise((resolve, reject) => {\n      let timer: any = undefined;\n      const img = new Image();\n      img.onerror = img.onabort = () => {\n        clearTimeout(timer);\n        reject(false);\n      };\n      img.onload = () => {\n        clearTimeout(timer);\n        resolve(true);\n      };\n      timer = setTimeout(() => {\n        img.src = '//!/an/invalid.jpg';\n        reject(false);\n      }, abortTimeout);\n      img.src = url;\n    });\n  },\n  /* check string is a valid url\n   */\n  validURL(str: string): boolean {\n    try {\n      return Boolean(new URL(str));\n    } catch (e) {\n      return false;\n    }\n  },\n  /* check the giving string is a html text\n   */\n  isRichText(clipboardDataItems: DataTransferItemList): boolean {\n    let isHtml = false;\n    Array.prototype.forEach.call(clipboardDataItems, (item) => {\n      if (item.type.match(/^text\\/html$/i)) {\n        isHtml = true;\n      }\n    });\n    return isHtml;\n  },\n  /* resolve dataUrl to base64 string\n   */\n  resolveDataUrl(dataUrl: string | ArrayBuffer): string {\n    let str = '';\n    if (typeof dataUrl === 'string') {\n      str = dataUrl;\n    } else if (dataUrl instanceof ArrayBuffer) {\n      str = this.arrayBufferToBase64Url(dataUrl);\n    }\n    return str;\n  },\n  /* generate array buffer from binary string\n   */\n  binaryStringToArrayBuffer(binary: string): ArrayBuffer {\n    const len = binary.length;\n    const buffer = new ArrayBuffer(len);\n    const arr = new Uint8Array(buffer);\n    let i = -1;\n    while (++i < len) arr[i] = binary.charCodeAt(i);\n    return buffer;\n  },\n  /* generate base64 string from array buffer\n   */\n  arrayBufferToBase64Url(arrayBuffer: ArrayBuffer): string {\n    return btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n  },\n  /* copy text - make text store in the clipboard\n   */\n  copyText(content: string, target = document.body): boolean {\n    const element = document.createElement('textarea');\n    const previouslyFocusedElement = document.activeElement;\n    element.value = content;\n    // Prevent keyboard from showing on mobile\n    element.setAttribute('readonly', '');\n    element.style.position = 'absolute';\n    element.style.left = '-9999px';\n    element.style.fontSize = '12pt'; // Prevent zooming on iOS\n    const selection = document.getSelection();\n    let originalRange: boolean | Range = false;\n    if (selection && selection.rangeCount > 0) {\n      originalRange = selection.getRangeAt(0);\n    }\n    target.append(element);\n    element.select();\n    // Explicit selection workaround for iOS\n    element.selectionStart = 0;\n    element.selectionEnd = content.length;\n    let isSuccess = false;\n    try {\n      isSuccess = document.execCommand('copy');\n    } catch {}\n    element.remove();\n    if (selection && originalRange) {\n      selection.removeAllRanges();\n      selection.addRange(originalRange);\n    }\n    // Get the focus back on the previously focused element, if any\n    if (previouslyFocusedElement) {\n      (previouslyFocusedElement as HTMLElement).focus();\n    }\n    return isSuccess;\n  },\n  /* check the type of specify target\n   */\n  isType(target: any, type: string): boolean {\n    return Object.prototype.toString.call(target) === `[object ${type}]`;\n  },\n};\n","import utils from './utils';\nimport { IImageDataMinifyOption } from './index.d';\n\nabstract class QuillImageData {\n  public dataUrl: string | ArrayBuffer;\n  public type: string;\n  public name: string;\n  public constructor(dataUrl: string | ArrayBuffer, type: string, name?: string) {\n    this.dataUrl = dataUrl;\n    this.type = type;\n    this.name = name || '';\n  }\n  public abstract minify(option: IImageDataMinifyOption);\n  public abstract toFile(filename?: string);\n  public abstract toBlob();\n}\n\nclass ImageData extends QuillImageData {\n  dataUrl: string | ArrayBuffer;\n  type: string;\n  name: string;\n\n  constructor(dataUrl: string | ArrayBuffer, type: string, name?: string) {\n    super(dataUrl, type, name);\n    this.dataUrl = dataUrl;\n    this.type = type;\n    this.name = name || `${utils.generateFilename()}.${this.getSuffix()}`;\n  }\n\n  /* minify the image\n   */\n  public minify(option: IImageDataMinifyOption): Promise<ImageData | { message: string }> {\n    return new Promise((resolve, reject) => {\n      const maxWidth = option.maxWidth || 800;\n      const maxHeight = option.maxHeight || 800;\n      const quality = option.quality || 0.8;\n      if (!this.dataUrl) {\n        return reject({\n          message: '[error] QuillImageDropAndPaste: Fail to minify the image, dataUrl should not be empty.',\n        });\n      }\n      const image = new Image();\n      image.onload = () => {\n        const width = image.width;\n        const height = image.height;\n        if (width > height) {\n          if (width > maxWidth) {\n            image.height = (height * maxWidth) / width;\n            image.width = maxWidth;\n          }\n        } else {\n          if (height > maxHeight) {\n            image.width = (width * maxHeight) / height;\n            image.height = maxHeight;\n          }\n        }\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n          ctx.drawImage(image, 0, 0, image.width, image.height);\n          const canvasType = this.type || 'image/png';\n          const canvasDataUrl = canvas.toDataURL(canvasType, quality);\n          resolve(new ImageData(canvasDataUrl, canvasType, this.name));\n        } else {\n          reject({\n            message: '[error] QuillImageDropAndPaste: Fail to minify the image, create canvas context failure.',\n          });\n        }\n      };\n      image.src = utils.resolveDataUrl(this.dataUrl);\n    });\n  }\n\n  /* convert blob to file\n   */\n  public toFile(filename?: string): File | null {\n    filename = filename || this.name;\n    if (!window.File) {\n      console.error('[error] QuillImageDropAndPaste: Your browser didnot support File API.');\n      return null;\n    }\n    return new File([this.toBlob()], filename, { type: this.type });\n  }\n\n  /* convert dataURL to blob\n   */\n  public toBlob(): Blob {\n    const base64 = utils.resolveDataUrl(this.dataUrl).replace(/^[^,]+,/, '');\n    const buff = utils.binaryStringToArrayBuffer(atob(base64));\n    return this.createBlob([buff], { type: this.type });\n  }\n\n  /* create blob\n   */\n  private createBlob(parts: ArrayBuffer[], properties: string | { type?: string } | undefined): Blob {\n    if (!properties) properties = {};\n    if (typeof properties === 'string') properties = { type: properties };\n    try {\n      return new Blob(parts, properties);\n    } catch (e) {\n      if (e.name !== 'TypeError') throw e;\n      const Builder =\n        'BlobBuilder' in window\n          ? (window as any).BlobBuilder\n          : 'MSBlobBuilder' in window\n          ? (window as any).MSBlobBuilder\n          : 'MozBlobBuilder' in window\n          ? (window as any).MozBlobBuilder\n          : (window as any).WebKitBlobBuilder;\n      const builder = new Builder();\n      for (let i = 0; i < parts.length; i++) builder.append(parts[i]);\n      return builder.getBlob(properties.type) as Blob;\n    }\n  }\n\n  private getSuffix(): string {\n    const matched = this.type.match(/^image\\/(\\w+)$/);\n    const suffix = matched ? matched[1] : 'png';\n    return suffix;\n  }\n}\n\nexport default ImageData;\n","import utils from './utils';\nimport Quill from 'quill';\nimport ImageData from './ImageData';\ninterface IImageDropAndPasteOption {\n  handler?: (dataUrl: string | ArrayBuffer, type?: string, imageData?: ImageData) => void;\n}\n\nabstract class QuillImageDropAndPaste {\n  static ImageData;\n  public quill;\n  public option: IImageDropAndPasteOption;\n  public constructor(quill: Quill, option: IImageDropAndPasteOption) {\n    this.quill = quill;\n    this.option = option;\n  }\n  protected abstract handleDrop(e: DragEvent);\n  protected abstract handlePaste(e: ClipboardEvent);\n  protected abstract readFiles(\n    files: DataTransferItemList | FileList,\n    callback: (dataUrl: string | ArrayBuffer, type?: string) => void,\n    e: ClipboardEvent | DragEvent,\n  );\n  protected abstract handleDataTransfer(\n    file: DataTransferItem,\n    callback: (dataUrl: string | ArrayBuffer, type?: string) => void,\n    e: ClipboardEvent | DragEvent,\n  );\n  protected abstract handleDroppedFile(\n    file: File,\n    callback: (dataUrl: string | ArrayBuffer, type?: string) => void,\n    e: ClipboardEvent | DragEvent,\n  );\n  protected abstract insert(content: string, type: string);\n  protected abstract getIndex();\n}\n\nclass ImageDropAndPaste extends QuillImageDropAndPaste {\n  static ImageData = ImageData;\n  quill: Quill;\n  option: IImageDropAndPasteOption;\n\n  constructor(quill: Quill, option: IImageDropAndPasteOption) {\n    super(quill, option);\n    this.quill = quill;\n    this.option = option;\n    this.handleDrop = this.handleDrop.bind(this);\n    this.handlePaste = this.handlePaste.bind(this);\n    this.insert = this.insert.bind(this);\n    this.quill.root.addEventListener('drop', this.handleDrop, false);\n    this.quill.root.addEventListener('paste', this.handlePaste, false);\n  }\n\n  /* handle image drop event\n   */\n  handleDrop(e: DragEvent): void {\n    e.preventDefault();\n    if (e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files.length) {\n      if (document.caretRangeFromPoint) {\n        const selection = document.getSelection();\n        const range = document.caretRangeFromPoint(e.clientX, e.clientY);\n        if (selection && range) {\n          selection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);\n        }\n      }\n      this.readFiles(\n        e.dataTransfer.files,\n        (dataUrl: string | ArrayBuffer, type = 'image/png', name?: string) => {\n          if (typeof this.option.handler === 'function') {\n            this.option.handler.call(this, dataUrl, type, new ImageData(dataUrl, type, name));\n          } else {\n            this.insert.call(this, utils.resolveDataUrl(dataUrl), type);\n          }\n        },\n        e,\n      );\n    }\n  }\n\n  /* handle image paste event\n   */\n  handlePaste(e: ClipboardEvent): void {\n    if (e.clipboardData && e.clipboardData.items && e.clipboardData.items.length) {\n      if (utils.isRichText(e.clipboardData.items)) return;\n      this.readFiles(\n        e.clipboardData.items,\n        (dataUrl: string | ArrayBuffer, type = 'image/png') => {\n          if (typeof this.option.handler === 'function') {\n            this.option.handler.call(this, dataUrl, type, new ImageData(dataUrl, type));\n          } else {\n            this.insert(utils.resolveDataUrl(dataUrl), 'image');\n          }\n        },\n        e,\n      );\n    }\n  }\n\n  /* read the files\n   */\n  readFiles(\n    files: DataTransferItemList | FileList,\n    callback: (dataUrl: string | ArrayBuffer, type: string, name?: string) => void,\n    e: ClipboardEvent | DragEvent,\n  ): void {\n    Array.prototype.forEach.call(files, (file: DataTransferItem | File) => {\n      if (utils.isType(file, 'DataTransferItem')) {\n        this.handleDataTransfer(file as DataTransferItem, callback, e);\n      } else if (file instanceof File) {\n        this.handleDroppedFile(file, callback, e);\n      }\n    });\n  }\n\n  /* handle the pasted data\n   */\n  handleDataTransfer(\n    file: DataTransferItem,\n    callback: (dataUrl: string | ArrayBuffer, type: string, name?: string) => void,\n    e: ClipboardEvent | DragEvent,\n  ): void {\n    const that = this;\n    const { type } = file;\n    if (type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp)/i)) {\n      e.preventDefault();\n      const reader = new FileReader();\n      reader.onload = (e: ProgressEvent<FileReader>) => {\n        if (e.target && e.target.result) {\n          callback(e.target.result, type);\n        }\n      };\n      const blob = file.getAsFile ? file.getAsFile() : file;\n      if (blob instanceof Blob) reader.readAsDataURL(blob);\n    } else if (type.match(/^text\\/plain$/i)) {\n      file.getAsString((s) => {\n        // Don't preventDefault here, because there might be clipboard matchers need to be triggered\n        // see https://github.com/chenjuneking/quill-image-drop-and-paste/issues/37\n        const i = this.getIndex();\n        utils\n          .urlIsImage(s)\n          .then(() => {\n            // If the pasted plain text is an image, delete the pasted text and insert the image\n            const j = this.getIndex();\n            this.quill.deleteText(i, j - i, 'user');\n            that.insert(s, 'image');\n          })\n          .catch(() => {\n            // Otherwise, do nothing\n          });\n      });\n    }\n  }\n\n  /* handle the dropped data\n   */\n  handleDroppedFile(\n    file: File,\n    callback: (dataUrl: string | ArrayBuffer, type: string, name?: string) => void,\n    e: ClipboardEvent | DragEvent,\n  ): void {\n    const { type, name = '' } = file;\n    if (type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp)/i)) {\n      e.preventDefault();\n      const reader = new FileReader();\n      reader.onload = (e: ProgressEvent<FileReader>) => {\n        if (e.target && e.target.result) {\n          callback(e.target.result, type, name);\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n\n  /* insert into the editor\n   */\n  insert(content: string, type: string): void {\n    const index = this.getIndex();\n    let _index: any;\n    if (type === 'image') {\n      _index = index + 1;\n      this.quill.insertEmbed(index, type, content, 'user');\n    } else if (type === 'text') {\n      _index = index + content.length;\n      this.quill.insertText(index, content, 'user');\n    }\n    setTimeout(() => {\n      this.quill.setSelection(_index);\n    });\n  }\n\n  getIndex(): number {\n    let index: number | undefined = (this.quill.getSelection(true) || {}).index;\n    if (index === undefined || index < 0) index = this.quill.getLength();\n    return index;\n  }\n}\n\n(window as any).QuillImageDropAndPaste = ImageDropAndPaste;\nif ('Quill' in window) {\n  (window as any).Quill.register('modules/imageDropAndPaste', ImageDropAndPaste);\n}\n\nexport default ImageDropAndPaste;\n"],"names":["generateFilename","btoa","String","Math","random","Date","replace","urlIsImage","url","abortTimeout","this","validURL","test","Promise","resolve","reject","timer","img","Image","onerror","onabort","clearTimeout","onload","setTimeout","src","str","Boolean","URL","e","isRichText","clipboardDataItems","isHtml","Array","prototype","forEach","call","item","type","match","resolveDataUrl","dataUrl","ArrayBuffer","arrayBufferToBase64Url","binaryStringToArrayBuffer","binary","len","length","buffer","arr","Uint8Array","i","charCodeAt","arrayBuffer","fromCharCode","copyText","content","target","document","body","element","createElement","previouslyFocusedElement","activeElement","value","setAttribute","style","position","left","fontSize","selection","getSelection","originalRange","rangeCount","getRangeAt","append","select","selectionStart","selectionEnd","isSuccess","execCommand","remove","removeAllRanges","addRange","focus","isType","Object","toString","ImageData","constructor","name","super","utils","getSuffix","minify","option","maxWidth","maxHeight","quality","message","image","width","height","canvas","ctx","getContext","drawImage","canvasType","canvasDataUrl","toDataURL","toFile","filename","window","File","toBlob","console","error","base64","buff","atob","createBlob","parts","properties","Blob","builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","getBlob","matched","ImageDropAndPaste","quill","handleDrop","bind","handlePaste","insert","root","addEventListener","preventDefault","dataTransfer","files","caretRangeFromPoint","range","clientX","clientY","setBaseAndExtent","startContainer","startOffset","readFiles","handler","clipboardData","items","callback","file","handleDataTransfer","handleDroppedFile","that","reader","FileReader","result","blob","getAsFile","readAsDataURL","getAsString","s","getIndex","then","j","deleteText","catch","index","_index","insertEmbed","insertText","setSelection","undefined","getLength","QuillImageDropAndPaste","Quill","register"],"mappings":"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"}